


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>webclip</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        /* CSS */
:root {
  font-family: Inter, sans-serif;
  font-feature-settings: 'liga' 1, 'calt' 1; /* fix for Chrome */
}
@supports (font-variation-settings: normal) {
  :root { font-family: InterVariable, sans-serif; }
}
        
        body {
            background-color: #000000;
            color: #ffffff;
            padding: 20px;
            scroll-behavior: smooth;
        }
        
        .container {
            max-width: 100%;
            margin: 0 auto;
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        
        .title {
            text-align: center;
            margin-bottom: 60px;
            animation: fadeIn 0.5s ease-out;
            font-size: 3rem;
            color: white;
            cursor: pointer;
            transition: all 0.3s ease;
            width: 100%;
        }
        
        .title:hover {
            transform: scale(1.02);
        }
        
        .search-container {
            display: flex;
            margin-bottom: 20px;
            width: 100%;
            max-width: 800px;
            border: 1px solid white;
        }
        
        #search-input {
            flex: 1;
            padding: 12px 15px;
            font-size: 16px;
            border: none;
            border-radius: 4px 0 0 4px;
            background-color: #000000;
            color: white;
            transition: all 0.3s ease;
            border: 1px solid white;
        }
        
        #search-input:focus {
            outline: none;
            box-shadow: 0 0 0 2px #ffffff;
        }
        
        #search-button {
            padding: 12px 20px;
            background-color: #000000;
            color: #ffffff;
            border: none;
            border-radius: 0 4px 4px 0;
            cursor: pointer;
            font-size: 16px;
            transition: all 0.3s ease;
            border: 1px solid white;
        }
        
        #search-button:hover {
            background-color: #111111;
            transform: translateY(-1px);
        }
        
        #search-button:active {
            transform: translateY(1px);
        }
        
        /* Shortcut buttons container */
        .shortcuts-container {
            display: flex;
            width: 100%;
            max-width: 800px;
            margin-bottom: 20px;
            gap: 20px;
        }
        
        .shortcuts-column {
            flex: 1;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }
        
        .shortcut-button {
            padding: 12px;
            background-color: #000000;
            color: white;
            border: 1px solid white;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            text-align: center;
            transition: all 0.3s ease;
        }
        
        .shortcut-button:hover {
            background-color: #111111;
            transform: translateY(-1px);
        }
        
        .results-container {
            display: flex;
            flex-direction: column;
            gap: 2px;
            margin-top: 20px;
            width: 100%;
            max-width: 800px;
        }
        
        .result-wrapper {
            display: flex;
            flex-direction: column;
        }
        
        .media-item {
            background-color: #000000;
            border-radius: 4px;
            overflow: hidden;
            cursor: pointer;
            display: flex;
            height: 80px;
            width: 100%;
            transition: all 0.3s ease;
            animation: fadeIn 0.5s ease-out;
            border: 1px solid white;
        }
        
        .media-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 2px 8px rgba(255, 255, 255, 0.1);
        }
        
        .media-item.active {
            border: 2px solid #ffffff;
        }
        
        .media-poster-container {
            width: 53px;
            height: 100%;
            flex-shrink: 0;
            border-right: 1px solid white;
        }
        
        .media-poster {
            width: 100%;
            height: 100%;
            object-fit: cover;
            transition: transform 0.3s ease;
        }
        
        .media-item:hover .media-poster {
            transform: scale(1.03);
        }
        
        .media-info {
            padding: 10px 15px;
            flex-grow: 1;
            display: flex;
            flex-direction: column;
            justify-content: center;
        }
        
        .media-text {
            flex-grow: 1;
            display: flex;
            flex-direction: column;
            justify-content: center;
        }
        
        .media-title {
            font-size: 15px;
            font-weight: 600;
            margin-bottom: 2px;
            transition: color 0.3s ease;
        }
        
        .media-item:hover .media-title {
            color: #ffffff;
        }
        
        .media-date {
            font-size: 12px;
            color: #aaaaaa;
        }
        
        .player-container {
            margin: 15px auto;
            width: 100%;
            max-width: 800px;
            position: relative;
            background-color: #000;
            border-radius: 6px;
            overflow: hidden;
            display: none;
            border: 1px solid white;
        }
        
        .player-container.visible {
            display: block;
            animation: fadeIn 0.5s ease-out;
        }
        
        .player-ratio {
            padding-bottom: 56.25%;
            position: relative;
        }
        
        iframe {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            border: none;
        }
        
        .button-row {
            background-color: #000000;
            padding: 8px;
            display: none;
            grid-template-columns: 1fr 1fr 1fr;
            gap: 8px;
            border: 1px solid white;
            border-top: none;
        }
        
        .button-row.active {
            display: grid;
        }
        
        .info-button {
            padding: 8px 12px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.3s ease;
            width: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 6px;
            border: 1px solid white;
        }
        
        .tmdb-button {
            background-color: #000000;
            color: #fff;
        }
        
        .tmdb-button:hover {
            background-color: #111111;
        }
        
        .justwatch-button {
            background-color: #000000;
            color: #fff;
        }
        
        .justwatch-button:hover {
            background-color: #111111;
        }
        
        .trailer-button {
            background-color: #000000;
            color: #fff;
        }
        
        .trailer-button:hover {
            background-color: #111111;
        }
        
        .trailer-button:disabled {
            background-color: #000000;
            color: #aaaaaa;
            cursor: not-allowed;
        }
        
        .sources-menu {
            background-color: #000000;
            border-radius: 4px;
            padding: 8px;
            margin-top: 2px;
            overflow: hidden;
            max-height: 0;
            opacity: 0;
            transition: all 0.3s ease-out;
            border: 1px solid white;
            border-top: none;
        }
        
        .sources-menu.active {
            max-height: 600px;
            opacity: 1;
            padding: 8px;
        }
        
        .source-item {
            padding: 6px 8px;
            margin-bottom: 3px;
            background-color: #111111;
            border-radius: 3px;
            cursor: pointer;
            transition: all 0.3s ease;
            border: 1px solid white;
            display: flex;
            justify-content: space-between;
            align-items: center;
            height: 36px;
        }
        
        .source-item:hover {
            background-color: #222222;
        }
        
        .source-item.selected {
            border-color: #ffffff;
            background-color: #222222;
        }
        
        .source-item:last-child {
            margin-bottom: 0;
        }
        
        .source-item-buttons {
            display: flex;
            gap: 4px;
        }
        
        .source-item-button {
            padding: 4px 8px;
            background-color: #222222;
            color: white;
            border: none;
            border-radius: 3px;
            cursor: pointer;
            font-size: 11px;
            transition: all 0.3s ease;
            border: 1px solid white;
        }
        
        .source-item-button:hover {
            background-color: #333333;
        }
        
        .source-item-button.play {
            background-color: #ffffff;
            color: #000000;
        }
        
        .source-item-button.play:hover {
            background-color: #f0f0f0;
        }
        
        .season-episode-selector {
            display: none;
            margin-top: 8px;
            gap: 8px;
        }
        
        .season-episode-selector.active {
            display: flex;
        }
        
        .season-episode-selector select {
            padding: 6px;
            background-color: #111111;
            color: white;
            border: none;
            border-radius: 3px;
            font-size: 12px;
            border: 1px solid white;
        }
        
        .loading {
            display: none;
            text-align: center;
            padding: 20px;
            color: white;
        }
        
        .loading.active {
            display: block;
        }
        
        .error {
            color: #ffffff;
            margin: 15px auto 0;
            padding: 8px;
            background-color: #000000;
            border-radius: 4px;
            display: none;
            width: 100%;
            max-width: 800px;
            border: 1px solid white;
        }
        
        .error.active {
            display: block;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        
        /* Particle animation styles */
        .particles-container {
            position: fixed;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: -1;
        }
        
        .particle {
            position: absolute;
            background-color: white;
            border-radius: 50%;
            opacity: 0;
            animation: rise linear infinite;
        }
        
        @keyframes rise {
            0% {
                transform: translateY(0);
                opacity: 0;
            }
            10% {
                opacity: 1;
            }
            60% {
                opacity: 0;
            }
            100% {
                transform: translateY(-60vh);
                opacity: 0;
            }
        }
    </style>
</head>
<body>
    <!-- Particles container (added at the beginning) -->
    <div class="particles-container" id="particles"></div>
    
    <div class="container">
        <!-- Updated title -->
        <h1 class="title" id="page-title">webclip.me</h1>
        
        <div class="search-container">
            <input type="text" id="search-input" placeholder="Search for movies or TV shows...">
            <button id="search-button">Search</button>
        </div>
        
        <!-- Shortcut buttons (only shown before search) -->
        <div class="shortcuts-container" id="shortcuts-container">
            <div class="shortcuts-column">
                <div class="shortcut-button" data-type="movie" data-category="popular">Popular Movies</div>
                <div class="shortcut-button" data-type="movie" data-category="trending">Trending Movies</div>
                <div class="shortcut-button" data-type="movie" data-category="top_rated">Top Rated Movies</div>
                <div class="shortcut-button" data-type="movie" data-category="now_playing">Now Playing</div>
            </div>
            <div class="shortcuts-column">
                <div class="shortcut-button" data-type="tv" data-category="popular">Popular TV</div>
                <div class="shortcut-button" data-type="tv" data-category="trending">Trending TV</div>
                <div class="shortcut-button" data-type="tv" data-category="top_rated">Top Rated TV</div>
                <div class="shortcut-button" data-type="tv" data-category="on_the_air">On Air Now</div>
            </div>
        </div>
        
        <div class="loading" id="loading">
            <p>Loading...</p>
        </div>
        
        <div class="error" id="error"></div>
        
        <div class="player-container" id="player-container">
            <div class="player-ratio">
                <iframe id="player-iframe" allowfullscreen></iframe>
            </div>
        </div>
        
        <div class="results-container" id="results-container"></div>
    </div>

    <script>
        // TMDB API key
        const API_KEY = '79d7c854f26de5ac978215ce03ff0c87';
        
        // Sources configuration
        const sources = [
            {
                "name": "vidlink.pro",
                "movieUrl": tmdbId => `https://vidlink.pro/movie/${tmdbId}`,
                "series": false
            },
            {
                "name": "vidsrc.nl",
                "movieUrl": tmdbId => `https://player.vidsrc.nl/embed/movie/${tmdbId}`,
                "seriesUrl": (tmdbId, season, episode) => `https://player.vidsrc.nl/embed/tv/${tmdbId}/${season}/${episode}`,
                "series": true
            },
            {
                "name": "vidsrc.cc",
                "movieUrl": tmdbId => `https://vidsrc.cc/v2/embed/movie/${tmdbId}`,
                "seriesUrl": (tmdbId, season, episode) => `https://v2.vidsrc.me/embed/${tmdbId}/${season}-${episode}`,
                "series": true
            },
            {
                "name": "vidsrc.to",
                "movieUrl": tmdbId => `https://vidsrc.to/embed/movie/${tmdbId}`,
                "seriesUrl": (tmdbId, season, episode) => `https://vidsrc.to/embed/tv/${tmdbId}/${season}-${episode}`,
                "series": true
            },
            {
                "name": "vidsrc.icu",
                "movieUrl": tmdbId => `https://vidsrc.icu/embed/movie/${tmdbId}`,
                "seriesUrl": (tmdbId, season, episode) => `https://vidsrc.icu/embed/tv/${tmdbId}/${season}/${episode}`,
                "series": true
            },
            {
                "name": "vidsrc.top",
                "movieUrl": tmdbId => `https://vidsrc.top/embed/movie/imdb/${tmdbId}`,
                "seriesUrl": (tmdbId, season, episode) => `https://vidsrc.top/embed/tv/imdb/${tmdbId}/${season}/${episode}`,
                "series": true
            },
            {
                "name": "autoembed.cc",
                "movieUrl": tmdbId => `https://player.autoembed.cc/embed/movie/${tmdbId}`,
                "seriesUrl": (tmdbId, season, episode) => `https://player.autoembed.cc/embed/tv/${tmdbId}/${season}/${episode}`,
                "series": true
            },
            {
                "name": "multiembed.mov",
                "movieUrl": tmdbId => `https://multiembed.mov/?video_id=${tmdbId}&tmdb=1`,
                "seriesUrl": (tmdbId, season, episode) => `https://multiembed.mov/?video_id=${tmdbId}&tmdb=1&s=${season}&e=${episode}`,
                "series": true
            },
            {
                "name": "multiembed.mov vip",
                "movieUrl": tmdbId => `https://multiembed.mov/directstream.php?video_id=${tmdbId}&tmdb=1`,
                "seriesUrl": (tmdbId, season, episode) => `https://multiembed.mov/directstream.php?video_id=${tmdbId}&tmdb=1&s=${season}&e=${episode}`,
                "series": true
            },
            {
                "name": "nontongo.win",
                "movieUrl": tmdbId => `https://www.NontonGo.win/embed/movie/${tmdbId}`,
                "seriesUrl": (tmdbId, season, episode) => `https://www.NontonGo.win/embed/tv/${tmdbId}/${season}/${episode}`,
                "series": true
            }
        ];
        
        // DOM elements
        const searchInput = document.getElementById('search-input');
        const searchButton = document.getElementById('search-button');
        const resultsContainer = document.getElementById('results-container');
        const playerContainer = document.getElementById('player-container');
        const playerIframe = document.getElementById('player-iframe');
        const loadingElement = document.getElementById('loading');
        const errorElement = document.getElementById('error');
        const particlesContainer = document.getElementById('particles');
        const pageTitle = document.getElementById('page-title');
        const shortcutsContainer = document.getElementById('shortcuts-container');
        
        // Current selected media item
        let currentMedia = null;
        let currentSource = null;
        let seasons = [];
        let episodes = [];
        let activeResultWrapper = null;
        let hasSearched = false;
        
        // Initialize particles if no search has been performed
        if (!hasSearched) {
            createParticles();
        }
        
        // Add click handler to refresh page when title is clicked
        pageTitle.addEventListener('click', () => {
            window.location.reload();
        });
        
        // Event listeners for shortcut buttons
        document.querySelectorAll('.shortcut-button').forEach(button => {
            button.addEventListener('click', function() {
                const type = this.getAttribute('data-type');
                const category = this.getAttribute('data-category');
                fetchCategoryResults(type, category);
            });
        });
        
        // Event listeners
        searchButton.addEventListener('click', searchMedia);
        searchInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                searchMedia();
            }
        });
        
        // Fetch results for a specific category
        async function fetchCategoryResults(type, category) {
            try {
                showLoading();
                clearResults();
                hideError();
                hidePlayer();
                
                // Remove particles and hide shortcuts on first interaction
                if (!hasSearched) {
                    removeParticles();
                    shortcutsContainer.style.display = 'none';
                    hasSearched = true;
                }
                
                let endpoint;
                if (category === 'trending') {
                    endpoint = `https://api.themoviedb.org/3/trending/${type}/day?api_key=${API_KEY}`;
                } else {
                    endpoint = `https://api.themoviedb.org/3/${type}/${category}?api_key=${API_KEY}`;
                }
                
                const response = await fetch(endpoint);
                const data = await response.json();
                
                if (data.results && data.results.length > 0) {
                    // Add media_type to each result since trending endpoint doesn't include it
                    const resultsWithType = data.results.map(item => {
                        return {...item, media_type: type};
                    });
                    displayResults(resultsWithType);
                } else {
                    showError('No results found');
                }
            } catch (error) {
                showError('An error occurred while fetching results');
                console.error(error);
            } finally {
                hideLoading();
            }
        }
        
        // Create particles
        function createParticles() {
            const particleCount = 80;
            
            for (let i = 0; i < particleCount; i++) {
                createParticle();
            }
            
            function createParticle() {
                const particle = document.createElement('div');
                particle.classList.add('particle');
                
                // Random size between 1px and 5px
                const size = Math.random() * 4 + 1;
                particle.style.width = `${size}px`;
                particle.style.height = `${size}px`;
                
                // Random starting position at bottom of screen
                particle.style.left = `${Math.random() * 100}vw`;
                particle.style.bottom = '-5px';
                
                // Random animation duration between 8s and 20s
                const duration = Math.random() * 12 + 8;
                particle.style.animationDuration = `${duration}s`;
                
                // Random delay to stagger appearance
                particle.style.animationDelay = `${Math.random() * 10}s`;
                
                particlesContainer.appendChild(particle);
                
                // Reset particle after animation completes
                particle.addEventListener('animationiteration', () => {
                    particle.style.left = `${Math.random() * 100}vw`;
                    particle.style.bottom = '-5px';
                });
            }
        }
        
        // Remove particles
        function removeParticles() {
            particlesContainer.innerHTML = '';
        }
        
        // Search for media
        async function searchMedia() {
            const query = searchInput.value.trim();
            
            if (!query) {
                showError('Please enter a search term');
                return;
            }
            
            try {
                showLoading();
                clearResults();
                hideError();
                hidePlayer();
                
                // Remove particles and hide shortcuts on first search
                if (!hasSearched) {
                    removeParticles();
                    shortcutsContainer.style.display = 'none';
                    hasSearched = true;
                }
                
                const response = await fetch(`https://api.themoviedb.org/3/search/multi?api_key=${API_KEY}&query=${encodeURIComponent(query)}`);
                const data = await response.json();
                
                if (data.results && data.results.length > 0) {
                    displayResults(data.results);
                } else {
                    showError('No results found');
                }
            } catch (error) {
                showError('An error occurred while searching');
                console.error(error);
            } finally {
                hideLoading();
            }
        }
        
        // Display search results
        function displayResults(results) {
            resultsContainer.innerHTML = '';
            
            results.forEach(item => {
                if (item.media_type === 'person' || !item.poster_path) return;
                
                const resultWrapper = document.createElement('div');
                resultWrapper.className = 'result-wrapper';
                
                const mediaItem = document.createElement('div');
                mediaItem.className = 'media-item';
                
                const posterPath = item.poster_path ? `https://image.tmdb.org/t/p/w500${item.poster_path}` : 'https://via.placeholder.com/500x750?text=No+Poster';
                const title = item.title || item.name;
                const date = item.release_date || item.first_air_date;
                const mediaType = item.media_type;
                
                mediaItem.innerHTML = `
                    <div class="media-poster-container">
                        <img class="media-poster" src="${posterPath}" alt="${title}">
                    </div>
                    <div class="media-info">
                        <div class="media-text">
                            <div class="media-title">${title}</div>
                            <div class="media-date">${date ? date.split('-')[0] : 'N/A'} • ${mediaType === 'movie' ? 'Movie' : 'TV Show'}</div>
                        </div>
                    </div>
                `;
                
                const buttonRow = document.createElement('div');
                buttonRow.className = 'button-row';
                buttonRow.innerHTML = `
                    <button class="info-button tmdb-button">
                        <i class="fab fa-tmdb"></i> TMDB
                    </button>
                    <button class="info-button justwatch-button">
                        <i class="fas fa-play-circle"></i> JustWatch
                    </button>
                    <button class="info-button trailer-button" disabled>
                        <i class="fab fa-youtube"></i> Loading...
                    </button>
                `;
                
                const tmdbButton = buttonRow.querySelector('.tmdb-button');
                const justwatchButton = buttonRow.querySelector('.justwatch-button');
                const trailerButton = buttonRow.querySelector('.trailer-button');
                
                // Set up TMDB button
                tmdbButton.addEventListener('click', () => {
                    window.open(`https://www.themoviedb.org/${item.media_type}/${item.id}`, '_blank');
                });
                
                // Set up JustWatch button
                justwatchButton.addEventListener('click', () => {
                    const searchQuery = encodeURIComponent(title);
                    window.open(`https://www.justwatch.com/us/search?q=${searchQuery}`, '_blank');
                });
                
                // Fetch trailer data
                fetchTrailer(item.id, item.media_type).then(trailerUrl => {
                    if (trailerUrl) {
                        trailerButton.innerHTML = '<i class="fab fa-youtube"></i> Trailer';
                        trailerButton.disabled = false;
                        trailerButton.addEventListener('click', () => {
                            window.open(trailerUrl, '_blank');
                        });
                    } else {
                        trailerButton.innerHTML = '<i class="fab fa-youtube"></i> No Trailer';
                        trailerButton.disabled = true;
                    }
                });
                
                const sourcesMenu = document.createElement('div');
                sourcesMenu.className = 'sources-menu';
                sourcesMenu.innerHTML = `
                    <h3>Select a source:</h3>
                    <div class="sources-list"></div>
                    <div class="season-episode-selector">
                        <select class="season-select"></select>
                        <select class="episode-select"></select>
                    </div>
                `;
                
                resultWrapper.appendChild(mediaItem);
                resultWrapper.appendChild(buttonRow);
                resultWrapper.appendChild(sourcesMenu);
                resultsContainer.appendChild(resultWrapper);
                
                const seasonSelect = sourcesMenu.querySelector('.season-select');
                const episodeSelect = sourcesMenu.querySelector('.episode-select');
                const sourcesList = sourcesMenu.querySelector('.sources-list');
                
                mediaItem.addEventListener('click', () => {
                    toggleSourcesMenu(item, resultWrapper, sourcesMenu, buttonRow);
                });
                
                seasonSelect.addEventListener('change', async () => {
                    await loadEpisodes(item, seasonSelect.value, episodeSelect);
                });
            });
        }
        
        // Fetch trailer URL from TMDB API
        async function fetchTrailer(tmdbId, mediaType) {
            try {
                const response = await fetch(`https://api.themoviedb.org/3/${mediaType}/${tmdbId}/videos?api_key=${API_KEY}`);
                const data = await response.json();
                
                if (data.results && data.results.length > 0) {
                    // Find the first official trailer (preferably in English)
                    const trailer = data.results.find(video => 
                        video.type === 'Trailer' && 
                        video.site === 'YouTube' &&
                        (video.iso_639_1 === 'en' || !video.iso_639_1)
                    ) || data.results.find(video => 
                        video.type === 'Trailer' && 
                        video.site === 'YouTube'
                    );
                    
                    if (trailer) {
                        return `https://www.youtube.com/watch?v=${trailer.key}`;
                    }
                }
                return null;
            } catch (error) {
                console.error('Error fetching trailer:', error);
                return null;
            }
        }
        
        // Toggle sources menu
        function toggleSourcesMenu(media, resultWrapper, sourcesMenu, buttonRow) {
            const mediaItem = resultWrapper.querySelector('.media-item');
            
            if (resultWrapper === activeResultWrapper) {
                mediaItem.classList.remove('active');
                sourcesMenu.classList.remove('active');
                buttonRow.classList.remove('active');
                activeResultWrapper = null;
                return;
            }
            
            if (activeResultWrapper) {
                const activeMenu = activeResultWrapper.querySelector('.sources-menu');
                const activeMediaItem = activeResultWrapper.querySelector('.media-item');
                const activeButtonRow = activeResultWrapper.querySelector('.button-row');
                activeMediaItem.classList.remove('active');
                activeMenu.classList.remove('active');
                activeButtonRow.classList.remove('active');
            }
            
            activeResultWrapper = resultWrapper;
            mediaItem.classList.add('active');
            sourcesMenu.classList.add('active');
            buttonRow.classList.add('active');
            
            const sourcesList = sourcesMenu.querySelector('.sources-list');
            if (sourcesList.children.length === 0) {
                loadSources(media, sourcesList, sourcesMenu.querySelector('.season-select'), sourcesMenu.querySelector('.episode-select'));
            }
            
            resultWrapper.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        }
        
        // Load sources
        async function loadSources(media, sourcesList, seasonSelect, episodeSelect) {
            currentMedia = media;
            sourcesList.innerHTML = '';
            
            const filteredSources = sources.filter(source => {
                if (media.media_type === 'movie') return true;
                if (media.media_type === 'tv') return source.series;
                return false;
            });
            
            filteredSources.forEach((source, index) => {
                const sourceItem = document.createElement('div');
                sourceItem.className = 'source-item';
                
                sourceItem.innerHTML = `
                    <span>${source.name}</span>
                    <div class="source-item-buttons">
                        <button class="source-item-button play">Play</button>
                        <button class="source-item-button">Open</button>
                    </div>
                `;
                
                const playBtn = sourceItem.querySelector('.source-item-button.play');
                const openBtn = sourceItem.querySelector('.source-item-button:not(.play)');
                
                playBtn.addEventListener('click', (e) => {
                    e.stopPropagation();
                    currentSource = source;
                    playMedia(media, seasonSelect, episodeSelect);
                });
                
                openBtn.addEventListener('click', (e) => {
                    e.stopPropagation();
                    currentSource = source;
                    openExternalSource(media, seasonSelect, episodeSelect);
                });
                
                sourceItem.addEventListener('click', () => {
                    const sourceItems = sourcesList.querySelectorAll('.source-item');
                    sourceItems.forEach(item => item.classList.remove('selected'));
                    sourceItem.classList.add('selected');
                    currentSource = source;
                });
                
                sourcesList.appendChild(sourceItem);
                
                if (index === 0) {
                    sourceItem.classList.add('selected');
                    currentSource = source;
                }
            });
            
            if (media.media_type === 'tv') {
                try {
                    const response = await fetch(`https://api.themoviedb.org/3/tv/${media.id}?api_key=${API_KEY}`);
                    const data = await response.json();
                    
                    seasons = data.seasons || [];
                    seasonSelect.innerHTML = '';
                    
                    if (seasons.length > 0) {
                        seasons.forEach(season => {
                            if (season.season_number === 0) return;
                            const option = document.createElement('option');
                            option.value = season.season_number;
                            option.textContent = `Season ${season.season_number}`;
                            seasonSelect.appendChild(option);
                        });
                        
                        await loadEpisodes(media, seasonSelect.value, episodeSelect);
                    }
                    
                    seasonSelect.parentElement.classList.add('active');
                } catch (error) {
                    console.error('Error loading seasons:', error);
                }
            } else {
                seasonSelect.parentElement.classList.remove('active');
            }
        }
        
        // Load episodes
        async function loadEpisodes(media, seasonNumber, episodeSelect) {
            try {
                const response = await fetch(`https://api.themoviedb.org/3/tv/${media.id}/season/${seasonNumber}?api_key=${API_KEY}`);
                const data = await response.json();
                
                episodes = data.episodes || [];
                episodeSelect.innerHTML = '';
                
                if (episodes.length > 0) {
                    episodes.forEach(episode => {
                        const option = document.createElement('option');
                        option.value = episode.episode_number;
                        option.textContent = `Episode ${episode.episode_number}`;
                        episodeSelect.appendChild(option);
                    });
                }
            } catch (error) {
                console.error('Error loading episodes:', error);
            }
        }
        
        // Play media
        function playMedia(media, seasonSelect, episodeSelect) {
            let url;
            
            if (media.media_type === 'movie') {
                url = currentSource.movieUrl(media.id);
            } else if (media.media_type === 'tv') {
                const season = seasonSelect.value;
                const episode = episodeSelect.value;
                url = currentSource.seriesUrl(media.id, season, episode);
            }
            
            playerIframe.src = url;
            playerContainer.classList.add('visible');
            
            setTimeout(() => {
                playerContainer.scrollIntoView({ behavior: 'smooth', block: 'start' });
            }, 50);
        }
        
        // Open external
        function openExternalSource(media, seasonSelect, episodeSelect) {
            if (!currentSource) {
                showError('Please select a source first');
                return;
            }
            
            let url;
            
            if (media.media_type === 'movie') {
                url = currentSource.movieUrl(media.id);
            } else if (media.media_type === 'tv') {
                const season = seasonSelect.value;
                const episode = episodeSelect.value;
                url = currentSource.seriesUrl(media.id, season, episode);
            }
            
            window.open(url, '_blank');
        }
        
        // Clear results
        function clearResults() {
            resultsContainer.innerHTML = '';
            activeResultWrapper = null;
        }
        
        // Hide player
        function hidePlayer() {
            playerContainer.classList.remove('visible');
            playerIframe.src = '';
        }
        
        // Show loading
        function showLoading() {
            loadingElement.classList.add('active');
        }
        
        // Hide loading
        function hideLoading() {
            loadingElement.classList.remove('active');
        }
        
        // Show error
        function showError(message) {
            errorElement.textContent = message;
            errorElement.classList.add('active');
        }
        
        // Hide error
        function hideError() {
            errorElement.classList.remove('active');
        }
    </script>
</body>
</html>

